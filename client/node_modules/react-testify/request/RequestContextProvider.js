"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestContextProvider = exports.useRequestContext = exports.RequestContext = exports.createRequest = exports.createRequestViaWindow = exports.Actions = void 0;
const React = __importStar(require("react"));
const WindowContextProvider_1 = require("../window/WindowContextProvider");
function createRequestInit(method = 'GET', body, headerEnricher) {
    return __awaiter(this, void 0, void 0, function* () {
        const enrichedHeaders = headerEnricher ? yield headerEnricher() : {};
        const requestInit = {
            method,
            headers: Object.assign({ Accept: 'application/json', 'Content-Type': 'application/json' }, enrichedHeaders)
        };
        if (body) {
            requestInit.body = JSON.stringify(body);
        }
        return requestInit;
    });
}
// supported
exports.Actions = {
    get: 'GET',
    post: 'POST',
    put: 'PUT',
    delete: 'DELETE',
    patch: 'PATCH'
};
function handleResponse(res) {
    try {
        const resContentType = res.headers.get('content-type');
        if (resContentType &&
            (resContentType.indexOf('application/json') >= 0 ||
                resContentType.indexOf('text/json') >= 0)) {
            try {
                return res.json();
            }
            catch (e) {
                return Promise.reject({ error: e, res });
            }
        }
        else {
            return Promise.reject({ error: new Error('Response is not json type'), res });
        }
    }
    catch (e) {
        return Promise.reject({ error: new Error('Unknown error caught') });
    }
}
function getFetch(ctx) {
    if (ctx) { // get from context as default
        return ctx.fetch;
    }
    if (!ctx && typeof window !== 'undefined') {
        // no window context provider,
        return window.fetch;
    }
    if (!ctx && typeof global !== 'undefined') {
        return global.fetch;
    }
    throw new Error('Unable to determine fetch to use.');
}
function createReqBodyActionHandler(actionKey, fetchProvider, enricher) {
    return (path, body) => __awaiter(this, void 0, void 0, function* () {
        const fetchProvided = fetchProvider();
        const requestInit = yield createRequestInit(exports.Actions[actionKey], body || {}, enricher ? enricher.header : undefined);
        const enrichedPath = enricher && enricher.path ? yield enricher.path(path) : path;
        const res = yield fetchProvided(enrichedPath, requestInit);
        return handleResponse(res);
    });
}
function createGetHandler(fetchProvider, enricher) {
    return (path) => __awaiter(this, void 0, void 0, function* () {
        const fetchProvided = fetchProvider();
        const requestInit = yield createRequestInit(exports.Actions.get, undefined, enricher ? enricher.header : undefined);
        const enrichedPath = enricher && enricher.path ? yield enricher.path(path) : path;
        const res = yield fetchProvided(enrichedPath, requestInit);
        return handleResponse(res);
    });
}
function createRequestViaWindow(windowContext) {
    return createRequest(() => {
        return getFetch(windowContext);
    });
}
exports.createRequestViaWindow = createRequestViaWindow;
function createRequest(fetchProvider, enricher) {
    return {
        post: createReqBodyActionHandler('post', fetchProvider, enricher),
        put: createReqBodyActionHandler('put', fetchProvider, enricher),
        delete: createReqBodyActionHandler('delete', fetchProvider, enricher),
        patch: createReqBodyActionHandler('patch', fetchProvider, enricher),
        get: createGetHandler(fetchProvider, enricher)
    };
}
exports.createRequest = createRequest;
exports.RequestContext = React.createContext(undefined);
function useRequestContext() {
    return React.useContext(exports.RequestContext);
}
exports.useRequestContext = useRequestContext;
function RequestContextProvider(props) {
    const windowContext = WindowContextProvider_1.useWindow();
    const requestContextRef = React.useRef(createRequestViaWindow(windowContext));
    return (React.createElement(exports.RequestContext.Provider, { value: requestContextRef.current }, props.children));
}
exports.RequestContextProvider = RequestContextProvider;
