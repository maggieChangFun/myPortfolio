var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as React from 'react';
import { useWindow } from '../window/WindowContextProvider';
function createRequestInit(method = 'GET', body, headerEnricher) {
    return __awaiter(this, void 0, void 0, function* () {
        const enrichedHeaders = headerEnricher ? yield headerEnricher() : {};
        const requestInit = {
            method,
            headers: Object.assign({ Accept: 'application/json', 'Content-Type': 'application/json' }, enrichedHeaders)
        };
        if (body) {
            requestInit.body = JSON.stringify(body);
        }
        return requestInit;
    });
}
// supported
export const Actions = {
    get: 'GET',
    post: 'POST',
    put: 'PUT',
    delete: 'DELETE',
    patch: 'PATCH'
};
function handleResponse(res) {
    try {
        const resContentType = res.headers.get('content-type');
        if (resContentType &&
            (resContentType.indexOf('application/json') >= 0 ||
                resContentType.indexOf('text/json') >= 0)) {
            try {
                return res.json();
            }
            catch (e) {
                return Promise.reject({ error: e, res });
            }
        }
        else {
            return Promise.reject({ error: new Error('Response is not json type'), res });
        }
    }
    catch (e) {
        return Promise.reject({ error: new Error('Unknown error caught') });
    }
}
function getFetch(ctx) {
    if (ctx) { // get from context as default
        return ctx.fetch;
    }
    if (!ctx && typeof window !== 'undefined') {
        // no window context provider,
        return window.fetch;
    }
    if (!ctx && typeof global !== 'undefined') {
        return global.fetch;
    }
    throw new Error('Unable to determine fetch to use.');
}
function createReqBodyActionHandler(actionKey, fetchProvider, enricher) {
    return (path, body) => __awaiter(this, void 0, void 0, function* () {
        const fetchProvided = fetchProvider();
        const requestInit = yield createRequestInit(Actions[actionKey], body || {}, enricher ? enricher.header : undefined);
        const enrichedPath = enricher && enricher.path ? yield enricher.path(path) : path;
        const res = yield fetchProvided(enrichedPath, requestInit);
        return handleResponse(res);
    });
}
function createGetHandler(fetchProvider, enricher) {
    return (path) => __awaiter(this, void 0, void 0, function* () {
        const fetchProvided = fetchProvider();
        const requestInit = yield createRequestInit(Actions.get, undefined, enricher ? enricher.header : undefined);
        const enrichedPath = enricher && enricher.path ? yield enricher.path(path) : path;
        const res = yield fetchProvided(enrichedPath, requestInit);
        return handleResponse(res);
    });
}
export function createRequestViaWindow(windowContext) {
    return createRequest(() => {
        return getFetch(windowContext);
    });
}
export function createRequest(fetchProvider, enricher) {
    return {
        post: createReqBodyActionHandler('post', fetchProvider, enricher),
        put: createReqBodyActionHandler('put', fetchProvider, enricher),
        delete: createReqBodyActionHandler('delete', fetchProvider, enricher),
        patch: createReqBodyActionHandler('patch', fetchProvider, enricher),
        get: createGetHandler(fetchProvider, enricher)
    };
}
export const RequestContext = React.createContext(undefined);
export function useRequestContext() {
    return React.useContext(RequestContext);
}
export function RequestContextProvider(props) {
    const windowContext = useWindow();
    const requestContextRef = React.useRef(createRequestViaWindow(windowContext));
    return (React.createElement(RequestContext.Provider, { value: requestContextRef.current }, props.children));
}
