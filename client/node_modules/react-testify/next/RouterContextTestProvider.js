"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouterContextTestProvider = void 0;
const React = __importStar(require("react"));
const router_context_1 = require("next/dist/shared/lib/router-context");
function createNextRouter(partial = {}) {
    const ourRouter = {
        asPath: '/',
        route: '/',
        pathname: '/',
        basePath: '/',
        isLocaleDomain: true,
        query: {},
        back() {
            // noops
        },
        beforePopState() {
            // noops
        },
        prefetch() {
            return Promise.resolve(void 0);
        },
        push() {
            return Promise.resolve(true);
        },
        reload() {
            // noops
        },
        replace() {
            return Promise.resolve(true);
        },
        isFallback: false,
        isReady: false,
        isPreview: false,
        events: {
            on() {
                // noops
            },
            off() {
                // noops
            },
            emit() {
                //noops
            }
        }
    };
    const nextRouter = Object.assign(Object.assign({}, ourRouter), partial);
    return nextRouter;
}
function RouterContextTestProvider(props) {
    const nextRouterRef = React.useRef(createNextRouter(props.router));
    return (React.createElement(router_context_1.RouterContext.Provider, { value: nextRouterRef.current }, props.children));
}
exports.RouterContextTestProvider = RouterContextTestProvider;
