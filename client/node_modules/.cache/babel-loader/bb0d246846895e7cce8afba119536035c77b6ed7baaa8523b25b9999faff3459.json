{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nimport { object } from \"prop-types\";\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"Contact Me\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementButtom = rec.Bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementButtom >= 0;\n      let completelyVisible = elementTop >= 0 && elementButtom <= window.innerHeight;\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n        case \"complete\":\n          return completelyVisible;\n        default:\n          return false;\n      }\n    };\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInSreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","object","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elementButtom","Bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInSreen","currentScreenBroadCaster","screenInView","addEventListener","scrollHandler"],"sources":["/Users/maggiechang/Desktop/portfoliopro/client/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nimport { object } from \"prop-types\"\n\nexport default class ScrollService{\n    static scrollHandler = new ScrollService();\n\n    static currentScreenBroadCaster = new Subject();\n    static currentScreenFadeIn = new Subject();\n\n    constructor(){\n        window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n    }\n\n    scrollToHireMe = ()=>{\n        let contactMeScreen = document.getElementById(\"Contact Me\");\n        if(!contactMeScreen) return ;\n\n        contactMeScreen.scrollIntoView({behavior:\"smooth\"});\n    }\n\n    scrollToHome = ()=>{\n        let homeScreen = document.getElementById(\"Home\");\n        if(!homeScreen) return ;\n\n        homeScreen.scrollIntoView({behavior:\"smooth\"});\n    }\n\n    isElementInView = (elem, type) =>{\n        let rec = elem.getBoundingClientRect();\n        let elementTop = rec.top;\n        let elementButtom = rec.Bottom;\n\n        let partiallyVisible = elementTop < window.innerHeight && elementButtom >= 0;\n        let completelyVisible = elementTop >= 0 && elementButtom <= window.innerHeight;\n\n        switch(type){\n            case \"partial\":\n            return partiallyVisible;\n\n            case \"complete\":\n                return completelyVisible\n                default:\n                    return false\n        }\n    }\n\n    checkCurrentScreenUnderViewport =(event)=>{\n        if(!event || Object.keys(event).length <1) return;\n        \n        for(let screen of TOTAL_SCREENS){\n            let screenFromDOM = document.getElementById(screen.screen_name);\n            if(!screenFromDOM) continue;\n\n            let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n            let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n            if(fullyVisible||partiallyVisible){\n                if(partiallyVisible && !screen.alreadyRendered){\n                    ScrollService.currentScreenFadeIn.next({\n                        fadeInSreen: screen.screen_name\n                    });\n                    screen['alreadyRendered'] = true;\n                    break;\n                }\n                if(fullyVisible){\n                    ScrollService.currentScreenBroadCaster.next({\n                        screenInView: screen.screen_name\n                    });\n                    break;\n                }\n            }\n        }\n    }\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,eAAe;AAC7C,SAASC,OAAO,QAAQ,MAAM;AAC9B,SAASC,MAAM,QAAQ,YAAY;AAEnC,eAAe,MAAMC,aAAa;EAM9BC,WAAWA,CAAA,EAAE;IAAA,KAIbC,cAAc,GAAG,MAAI;MACjB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;MAC3D,IAAG,CAACF,eAAe,EAAE;MAErBA,eAAe,CAACG,cAAc,CAAC;QAACC,QAAQ,EAAC;MAAQ,CAAC,CAAC;IACvD,CAAC;IAAA,KAEDC,YAAY,GAAG,MAAI;MACf,IAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;MAChD,IAAG,CAACI,UAAU,EAAE;MAEhBA,UAAU,CAACH,cAAc,CAAC;QAACC,QAAQ,EAAC;MAAQ,CAAC,CAAC;IAClD,CAAC;IAAA,KAEDG,eAAe,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAI;MAC7B,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAqB,EAAE;MACtC,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAAG;MACxB,IAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAM;MAE9B,IAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAAW,IAAIJ,aAAa,IAAI,CAAC;MAC5E,IAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAC,IAAIE,aAAa,IAAIG,MAAM,CAACC,WAAW;MAE9E,QAAOT,IAAI;QACP,KAAK,SAAS;UACd,OAAOO,gBAAgB;QAEvB,KAAK,UAAU;UACX,OAAOG,iBAAiB;QACxB;UACI,OAAO,KAAK;MAAA;IAE5B,CAAC;IAAA,KAEDC,+BAA+B,GAAGC,KAAK,IAAG;MACtC,IAAG,CAACA,KAAK,IAAIC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,GAAE,CAAC,EAAE;MAE3C,KAAI,IAAIC,MAAM,IAAI/B,aAAa,EAAC;QAC5B,IAAIgC,aAAa,GAAGzB,QAAQ,CAACC,cAAc,CAACuB,MAAM,CAACE,WAAW,CAAC;QAC/D,IAAG,CAACD,aAAa,EAAE;QAEnB,IAAIE,YAAY,GAAG,IAAI,CAACrB,eAAe,CAACmB,aAAa,EAAE,UAAU,CAAC;QAClE,IAAIV,gBAAgB,GAAG,IAAI,CAACT,eAAe,CAACmB,aAAa,EAAE,SAAS,CAAC;QAErE,IAAGE,YAAY,IAAEZ,gBAAgB,EAAC;UAC9B,IAAGA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAAe,EAAC;YAC3ChC,aAAa,CAACiC,mBAAmB,CAACC,IAAI,CAAC;cACnCC,WAAW,EAAEP,MAAM,CAACE;YACxB,CAAC,CAAC;YACFF,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI;YAChC;UACJ;UACA,IAAGG,YAAY,EAAC;YACZ/B,aAAa,CAACoC,wBAAwB,CAACF,IAAI,CAAC;cACxCG,YAAY,EAAET,MAAM,CAACE;YACzB,CAAC,CAAC;YACF;UACJ;QACJ;MACJ;IACJ,CAAC;IA9DGV,MAAM,CAACkB,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACf,+BAA+B,CAAC;EAC3E;AA8DJ;AAtEqBvB,aAAa,CACvBuC,aAAa,GAAG,IAAIvC,aAAa,EAAE;AADzBA,aAAa,CAGvBoC,wBAAwB,GAAG,IAAItC,OAAO,EAAE;AAH9BE,aAAa,CAIvBiC,mBAAmB,GAAG,IAAInC,OAAO,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}